name: Release cordova extension

on:
  push:
    tags:
      - cordova-*
  pull_request:
    branches:
      - main

jobs:
  initial_release:
    name: Publish wasm package
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Set version output
        id: get_version
        run: echo ::set-output name=version::``${GITHUB_REF#refs/tags/}``

  build_uniffi:
    name: Build uniffi jni shared libs for android with cross
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - { target: aarch64-linux-android }
          - { target: armv7-linux-androideabi }
          - { target: i686-linux-android }
          - { target: x86_64-linux-android }

    steps:
      - name: Checkout code
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Build library (release)
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: rustc
          args: --release --target ${{ matrix.config.target }} -p wallet-uniffi --features builtin-bindgen -- -C link-args=-ldl

      - name: Prepare package
        run: mkdir -p jniLibs/${{ matrix.config.target }}

      - name: copy binary
        run: cp ./target/${{ matrix.config.target }}/release/libuniffi_jormungandr_wallet.so ./jniLibs/${{ matrix.config.target }}/;

      - uses: actions/upload-artifact@v2
        with:
          name: jniLibs
          path: ./jniLibs
          retention-days: 1

  build_lipo_asset:
    name: Build universal lib for cordova plugin
    runs-on: macos-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          default: true

      - run: rustup target add x86_64-apple-ios
      - run: rustup target add aarch64-apple-ios

      - name: Checkout code
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: build universal lib
        working-directory: ./bindings/wallet-cordova/scripts
        run: python3 ./build_ios.py

      - uses: actions/upload-artifact@v1
        with:
          name: iosLibs
          path: ./bindings/wallet-cordova/src/ios

  package_cordova_plugin:
    runs-on: ubuntu-latest
    needs: [build_uniffi, build_lipo_asset]

    steps:
      - name: Checkout code
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Download jni libs
        uses: actions/download-artifact@v1
        with:
          name: jniLibs

      - name: make libs directory
        run: mkdir -p bindings/wallet-cordova/src/android/libs

      - name: Copy libs
        run: cp -r jniLibs/* bindings/wallet-cordova/src/android/libs

      - name: rename arm64-v8a
        working-directory: ./bindings/wallet-cordova/src/android/libs
        run: mv aarch64-linux-android arm64-v8a

      - name: rename armv7-linux-androideabi
        working-directory: ./bindings/wallet-cordova/src/android/libs
        run: mv armv7-linux-androideabi armeabi-v7a

      - name: rename i686-linux-android
        working-directory: ./bindings/wallet-cordova/src/android/libs
        run: mv i686-linux-android x86

      - name: rename x86_64
        working-directory: ./bindings/wallet-cordova/src/android/libs
        run: mv x86_64-linux-android x86_64

      - name: Install wasm pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: build wasm for electron
        working-directory: ./bindings/wallet-cordova/scripts
        run: python3 ./build_wasm.py

      - name: Install uniffi
        uses: actions-rs/install@v0.1
        with:
          crate: uniffi_bindgen
          version: 0.20.0
          use-tool-cache: true

      - name: copy java definitions from jni
        run: python3 ./bindings/wallet-cordova/scripts/copy_jni_definitions.py

      - name: Download artifact with universal lib
        uses: actions/download-artifact@v1
        with:
          name: iosLibs

      - name: Copy universal lib to plugin's directory
        run: cp -r iosLibs/* bindings/wallet-cordova/src/ios

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: package module
        run: npm pack ./bindings/wallet-cordova

      - name: rename-tarball
        run: |
          find . \
            -name wallet-cordova-plugin*.tgz \
            -exec mv {} chain-wallet-libs-${{ needs.initial_release.outputs.version }}-cordova.tgz \;

      # - name: Upload binaries to release
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.initial_release.outputs.upload_url }}
      #     asset_path: ./chain-wallet-libs-${{ needs.initial_release.outputs.version }}-cordova.tgz
      #     asset_name: chain-wallet-libs-cordova-${{ needs.initial_release.outputs.version }}
      #     asset_content_type: application/gzip