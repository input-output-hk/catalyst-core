/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// VoterInfo : voter's info



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VoterInfo {
    /// Voting keys voting power. This is the true voting power, subject to minimum voting power and max cap.
    #[serde(rename = "voting_power", deserialize_with = "Option::deserialize")]
    pub voting_power: Option<serde_json::Value>,
    #[serde(rename = "voting_group")]
    pub voting_group: crate::models::VoterGroupId,
    /// Total voting power delegated to this voting key. This is not capped and not subject to minimum voting power.
    #[serde(rename = "delegations_power", deserialize_with = "Option::deserialize")]
    pub delegations_power: Option<serde_json::Value>,
    /// Number of registration which delegated to this voting key.
    #[serde(rename = "delegations_count", deserialize_with = "Option::deserialize")]
    pub delegations_count: Option<serde_json::Value>,
    /// Voting power's share of the total voting power. Can be used to gauge potential voting power saturation. This value is NOT saturated however, and gives the raw share of total registered voting power.
    #[serde(rename = "voting_power_saturation", deserialize_with = "Option::deserialize")]
    pub voting_power_saturation: Option<serde_json::Value>,
    /// List of stake public key addresses which delegated to this voting key.
    #[serde(rename = "delegator_addresses", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub delegator_addresses: Option<Option<serde_json::Value>>,
}

impl VoterInfo {
    /// voter's info
    pub fn new(voting_power: Option<serde_json::Value>, voting_group: crate::models::VoterGroupId, delegations_power: Option<serde_json::Value>, delegations_count: Option<serde_json::Value>, voting_power_saturation: Option<serde_json::Value>) -> VoterInfo {
        VoterInfo {
            voting_power,
            voting_group,
            delegations_power,
            delegations_count,
            voting_power_saturation,
            delegator_addresses: None,
        }
    }
}


