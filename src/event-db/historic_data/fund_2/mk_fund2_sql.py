#!/usr/bin/env python3
"""
Simple program to convert the Fund 2 sqlite3 database into a format we can use in the
new event DB.
"""

from __future__ import annotations

import argparse
import sqlite3
import sys
import json
from pathlib import Path
from time import gmtime, strftime
import binascii


def is_dir(dirpath: str | Path):
    """Check if the directory is a directory."""
    real_dir = Path(dirpath)
    if real_dir.exists() and real_dir.is_dir():
        return real_dir
    raise argparse.ArgumentTypeError(f"{dir} is not a directory.")


def is_file(filename: str):
    """Does the path exist and is it a file"""
    real_filename = Path(filename).relative_to(".")
    is_dir(real_filename.parent)
    if real_filename.is_dir():
        raise argparse.ArgumentTypeError(f"{filename} is not a file.")
    return real_filename

def epoch_to_time(epoch: int) -> str:
    """Convert an epoch time into a time string."""
    return strftime('%Y-%m-%d %H:%M:%S', gmtime(epoch))

def pg_esc(line: str) -> str:
    """Escape a string for postgres."""
    return line.replace("'","''")

def event_table(con: sqlite3.Connection) -> str:
    """Return the start of the SQL file and the Event table definition."""

    cur = con.cursor()
    funds = cur.execute("SELECT * FROM funds LIMIT 1").fetchone()

    voteplans = cur.execute("SELECT * FROM voteplans LIMIT 1").fetchone()

    return f"""--sql
-- Data from Catalyst Fund 2 - First Funded Event
-- AUTOGENERATED - DO NOT EDIT

-- Purge all Fund 2 data before re-inserting it.
DELETE FROM event WHERE row_id = 2;

-- Load the raw Block0 Binary from the file.
\\set block0path 'historic_data/fund_2/block0.bin'
\\set block0contents `base64 :block0path`

-- Create the Event record for Fund 2

INSERT INTO event
(row_id, name, description,
 start_time,
 end_time,
 registration_snapshot_time,
 snapshot_start,
 voting_power_threshold,
 max_voting_power_pct,
 insight_sharing_start,
 proposal_submission_start,
 refine_proposals_start,
 finalize_proposals_start,
 proposal_assessment_start,
 assessment_qa_start,
 voting_start,
 voting_end,
 tallying_end,
 block0,
 block0_hash,
 committee_size,
 committee_threshold)
VALUES

(2, 'Catalyst Fund 2', '{funds[2]}',
 '2020-09-23 00:00:00', -- Start Time - Date accurate, time not known.
 '2021-01-10 20:00:00', -- End Time   - Date/Time accurate.
 '2020-12-15 17:00:04', -- Registration Snapshot Time - Date/time Accurate. Slot 16485313
                        -- DB Says {funds[3]} -- Inaccurate
 '2020-12-15 17:30:00', -- Snapshot Start - Date/time Accurate. Slot?
 {funds[4]},            -- Voting Power Threshold -- Accurate
 100,                   -- Max Voting Power PCT - No max% threshold used in this fund.
 NULL,                  -- Insight Sharing Start - None
 '2020-09-23 00:00:00', -- Proposal Submission Start - Date accurate, time not known.
 NULL,                  -- Refine Proposals Start - Date accurate, time not known.
 '2020-10-21 23:59:59', -- Finalize Proposals Start - Date accurate, time not known.
 NULL,                  -- Proposal Assessment Start - None
 NULL,                  -- Assessment QA Start - None
 '{epoch_to_time(funds[6])}', -- Voting Starts - Date/time Accurate.
 '{epoch_to_time(funds[7])}', -- Voting Ends - Date/time Accurate.
 '{epoch_to_time(voteplans[4])}', -- Tallying Ends - Date/time Accurate.
 decode(:'block0contents','base64'),
                        -- Block 0 Data - From File
 NULL,                  -- Block 0 Hash - TODO
 0,                     -- Committee Size - No Encrypted Votes
 0                      -- Committee Threshold - No Encrypted Votes
 );

-- Free large binary file contents
\\unset block0contents

"""

def objective_table(con: sqlite3.Connection) -> str:
    """Return the start of the SQL file and the Event table definition."""

    _ = con

    return """--sql
-- Only 1 Challenge for FUND 2
INSERT INTO objective
(
    id,
    event,
    category,
    title,
    description,
    rewards_currency,
    rewards_total,
    rewards_total_lovelace,
    proposers_rewards,
    vote_options
)
VALUES
(
    0, -- Ideascale ID not known.
    2, -- Event 2
    'catalyst-simple', -- Category
    'Fund 2 Challenge', -- Title
    '', -- No Description
    'USD_ADA', -- Currency
    250000, -- USD
    2336450000000, -- Lovelace
    NULL, -- Don't know
    1
);

"""

def proposals_table(con: sqlite3.Connection) -> str:
    """Return the proposals for Fund 2."""

    cur = con.cursor()
    proposals = cur.execute("SELECT * FROM proposals").fetchall()

    challenge_id = "(SELECT row_id FROM objective WHERE id=0 AND event=2)"

    all_proposals = ""
    for proposal in proposals:
        if len(all_proposals) > 0:
            all_proposals += ',\n'

        extra = json.dumps(
            {
                "problem": pg_esc(proposal[5]),
                "solution": pg_esc(proposal[6])
            }
        )

        bb_proposal_id = None

        all_proposals += f"""--sql
(
    {proposal[1]},  -- id
    {challenge_id}, -- objective
    '{pg_esc(proposal[3])}',  -- title
    '{pg_esc(proposal[4])}',  -- summary
    'catalyst-simple', -- category - VITSS Compat ONLY
    '{proposal[7]}', -- Public Payment Key
    '{proposal[8]}', -- funds
    '{proposal[9]}', -- url
    '{proposal[10]}', -- files_url
    {proposal[11]}, -- impact_score
    '{extra}', -- extra
    '{pg_esc(proposal[12])}', -- proposer name
    '{proposal[13]}', -- proposer contact
    '{proposal[14]}', -- proposer URL
    '{pg_esc(proposal[15])}', -- relevant experience
    '{bb_proposal_id}',  -- bb_proposal_id
    '{{ "yes", "no" }}' -- bb_vote_options - Deprecated VitSS compat ONLY.
)
"""


    return f"""--sql
-- All Proposals for  FUND 2
INSERT INTO proposal
(
    id,
    objective,
    title,
    summary,
    category,
    public_key,
    funds,
    url,
    files_url,
    impact_score,
    extra,
    proposer_name,
    proposer_contact,
    proposer_url,
    proposer_relevant_experience,
    bb_proposal_id,
    bb_vote_options
)
VALUES
{all_proposals}
;
"""

def voteplan_table(con: sqlite3.Connection) -> str:
    """Return the voteplan tables."""

    cur = con.cursor()

    voteplans = cur.execute("SELECT * FROM voteplans LIMIT 1").fetchone()

    return f"""--sql

"""


def main() -> int:
    """Parse CLI arguments."""
    parser = argparse.ArgumentParser(
        description="Process Fund2."
    )
    parser.add_argument(
        "filename",
        help="Sqlite3 Fund2 file to read.",
        type=is_file,
    )

    args = parser.parse_args()

    # Open the sqlite file.
    con = sqlite3.connect(args.filename)

    sql_data = event_table(con)
    sql_data += objective_table(con)
    sql_data += proposals_table(con)

    print(sql_data)

    return 0

if __name__ == "__main__":
    sys.exit(main())
