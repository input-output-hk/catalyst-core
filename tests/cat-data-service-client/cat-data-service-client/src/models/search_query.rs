/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// SearchQuery : Parameters for the search



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SearchQuery {
    #[serde(rename = "table")]
    pub table: crate::models::SearchTable,
    #[serde(rename = "filter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Option<serde_json::Value>>,
    #[serde(rename = "order_by", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub order_by: Option<Option<serde_json::Value>>,
}

impl SearchQuery {
    /// Parameters for the search
    pub fn new(table: crate::models::SearchTable) -> SearchQuery {
        SearchQuery {
            table,
            filter: None,
            order_by: None,
        }
    }
}


