/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// ProposalSummary : Summary of a Proposal for an Objective



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProposalSummary {
    /// The ID of this proposal.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// Short title of the proposal.
    #[serde(rename = "title", deserialize_with = "Option::deserialize")]
    pub title: Option<serde_json::Value>,
    /// Brief description of the proposal.
    #[serde(rename = "summary", deserialize_with = "Option::deserialize")]
    pub summary: Option<serde_json::Value>,
}

impl ProposalSummary {
    /// Summary of a Proposal for an Objective
    pub fn new(id: Option<serde_json::Value>, title: Option<serde_json::Value>, summary: Option<serde_json::Value>) -> ProposalSummary {
        ProposalSummary {
            id,
            title,
            summary,
        }
    }
}


