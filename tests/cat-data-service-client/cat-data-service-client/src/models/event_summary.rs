/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// EventSummary : A Summary of an individual Voting Event



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EventSummary {
    /// The Numeric ID of a Voting Event
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The Name of a Voting Event
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<serde_json::Value>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "starts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub starts: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "ends", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ends: Option<Option<serde_json::Value>>,
    /// True if the event is finished and no changes can be made to it.<br>Does not Including payment of rewards or funding of projects.
    #[serde(rename = "final", deserialize_with = "Option::deserialize")]
    pub r#final: Option<serde_json::Value>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "reg_checked", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reg_checked: Option<Option<serde_json::Value>>,
}

impl EventSummary {
    /// A Summary of an individual Voting Event
    pub fn new(id: Option<serde_json::Value>, name: Option<serde_json::Value>, r#final: Option<serde_json::Value>) -> EventSummary {
        EventSummary {
            id,
            name,
            starts: None,
            ends: None,
            r#final,
            reg_checked: None,
        }
    }
}


