/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// EventSchedule : The chronological sequence of stages of the voting event.\\ Stages run chronologically and only 1 stage can run at a time.\\ Each new stage terminates the previous stage.\\ Any omitted entries are assumed to not exist as a stage in this event.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EventSchedule {
    /// RFC3339 DateTime String UTC.
    #[serde(
        rename = "insight_sharing",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub insight_sharing: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(
        rename = "proposal_submission",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub proposal_submission: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(
        rename = "refine_proposals",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub refine_proposals: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(
        rename = "finalize_proposals",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub finalize_proposals: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(
        rename = "proposal_assessment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub proposal_assessment: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(
        rename = "assessment_qa_start",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub assessment_qa_start: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "voting", deserialize_with = "Option::deserialize")]
    pub voting: Option<serde_json::Value>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "tallying", deserialize_with = "Option::deserialize")]
    pub tallying: Option<serde_json::Value>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "tallying_end", deserialize_with = "Option::deserialize")]
    pub tallying_end: Option<serde_json::Value>,
}

impl EventSchedule {
    /// The chronological sequence of stages of the voting event.\\ Stages run chronologically and only 1 stage can run at a time.\\ Each new stage terminates the previous stage.\\ Any omitted entries are assumed to not exist as a stage in this event.
    pub fn new(
        voting: Option<serde_json::Value>,
        tallying: Option<serde_json::Value>,
        tallying_end: Option<serde_json::Value>,
    ) -> EventSchedule {
        EventSchedule {
            insight_sharing: None,
            proposal_submission: None,
            refine_proposals: None,
            finalize_proposals: None,
            proposal_assessment: None,
            assessment_qa_start: None,
            voting,
            tallying,
            tallying_end,
        }
    }
}
