/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// VotingPowerSettings : The Settings Used to configure the voting power calculation.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VotingPowerSettings {
    /// The Voting Power Algorithm.  * `threshold_staked_ADA` = \"Linear Voting Power in Staked ADA, With a minimum limit and maximum relative threshold.
    #[serde(rename = "alg", deserialize_with = "Option::deserialize")]
    pub alg: Option<Alg>,
    /// Minimum staked funds required for a valid voter registration. This amount is in Whole ADA. If not present, there is no minimum.\\ Valid for `alg`: * `threshold_staked_ADA`
    #[serde(rename = "min_ada", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_ada: Option<Option<serde_json::Value>>,
    /// Maximum Percentage of total registered voting power allowed for voting power. For example `1.23` = `1.23%` of total registered staked ADA as maximum voting power. If not present, there is no maximum percentage.\\ Valid for `alg`: * `threshold_staked_ADA`
    #[serde(rename = "max_pct", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_pct: Option<Option<serde_json::Value>>,
}

impl VotingPowerSettings {
    /// The Settings Used to configure the voting power calculation.
    pub fn new(alg: Option<Alg>) -> VotingPowerSettings {
        VotingPowerSettings {
            alg,
            min_ada: None,
            max_pct: None,
        }
    }
}

/// The Voting Power Algorithm.  * `threshold_staked_ADA` = \"Linear Voting Power in Staked ADA, With a minimum limit and maximum relative threshold.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Alg {
    #[serde(rename = "threshold_staked_ADA")]
    ThresholdStakedAda,
}

impl Default for Alg {
    fn default() -> Alg {
        Self::ThresholdStakedAda
    }
}

