/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// ObjectiveDetails : Individual Objective Details



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ObjectiveDetails {
    /// The valid voter groups for this voting event.
    #[serde(rename = "groups", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Option<serde_json::Value>>,
    /// The Total Reward being offered for this Objective. Distribution of the Reward is determined under the rules of this Objective. If this field is not present there is no reward being offered for the Objective.
    #[serde(rename = "reward", skip_serializing_if = "Option::is_none")]
    pub reward: Option<Box<crate::models::RewardDefinition>>,
    /// External URL that better describes the Objective.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<serde_json::Value>>,
    #[serde(rename = "supplemental", skip_serializing_if = "Option::is_none")]
    pub supplemental: Option<Box<crate::models::ObjectiveSupplementalData>>,
}

impl ObjectiveDetails {
    /// Individual Objective Details
    pub fn new() -> ObjectiveDetails {
        ObjectiveDetails {
            groups: None,
            reward: None,
            url: None,
            supplemental: None,
        }
    }
}


