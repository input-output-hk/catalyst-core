/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// VitSsNextFundInfoNext : Note, ANY date-time formatted field in this API may report: \"1970-01-01T00:00:00Z\" Which is The unix Epoch.         This date is to be interpreted that the date-time for the event the  field represents is not yet known. The UI may either not display anything for this field, or TBD or an  equivalent message.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VitSsNextFundInfoNext {
    /// Identifier of the fund campaign.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<serde_json::Value>>,
    /// Human-readable name of the fund campaign.
    #[serde(rename = "fund_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fund_name: Option<Option<serde_json::Value>>,
    #[serde(rename = "insight_sharing_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub insight_sharing_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "proposal_submission_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub proposal_submission_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "refine_proposals_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refine_proposals_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "finalize_proposals_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub finalize_proposals_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "proposal_assessment_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub proposal_assessment_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "assessment_qa_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub assessment_qa_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "snapshot_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub snapshot_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "voting_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub voting_start: Option<Option<serde_json::Value>>,
    #[serde(rename = "voting_end", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub voting_end: Option<Option<serde_json::Value>>,
    #[serde(rename = "tallying_end", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tallying_end: Option<Option<serde_json::Value>>,
}

impl VitSsNextFundInfoNext {
    /// Note, ANY date-time formatted field in this API may report: \"1970-01-01T00:00:00Z\" Which is The unix Epoch.         This date is to be interpreted that the date-time for the event the  field represents is not yet known. The UI may either not display anything for this field, or TBD or an  equivalent message.
    pub fn new() -> VitSsNextFundInfoNext {
        VitSsNextFundInfoNext {
            id: None,
            fund_name: None,
            insight_sharing_start: None,
            proposal_submission_start: None,
            refine_proposals_start: None,
            finalize_proposals_start: None,
            proposal_assessment_start: None,
            assessment_qa_start: None,
            snapshot_start: None,
            voting_start: None,
            voting_end: None,
            tallying_end: None,
        }
    }
}


