"""Snapshot importer CLI commands."""

import asyncio
import typer

from ideascale_importer.snapshot_importer import Importer
from ideascale_importer.utils import configure_logger

app = typer.Typer(add_completion=False)


@app.command(name="import")
def import_snapshot(
    config_path: str = typer.Option(..., help="Path to the configuration file"),
    event_id: int = typer.Option(..., help="Database event id to link all snapshot data to"),
    database_url: str = typer.Option(..., help="URL of the Postgres database in which to import the data to"),
    output_dir: str = typer.Option(..., help="Output directory for generated files"),
    raw_snapshot_file: str = typer.Option(
        None,
        help=(
            "Raw snapshot file generated by Catalyst snapshot_tool."
            "If this is set, running snapshot_tool will be skipped and the contents of this file will be used"
        ),
    ),
    dreps_file: str = typer.Option(
        None,
        help=(
            "Should be a file containing the list of dreps as returned by the GVC API."
            "If this is set, calling GVC dreps API will be skipped and the contents of this file will be used"
        ),
    ),
    log_level: str = typer.Option(
        "info",
        help="Log level",
    ),
    log_format: str = typer.Option(
        "text",
        help="Log format",
    ),
):
    """Import snapshot data into the database."""
    configure_logger(log_level, log_format)

    configure_logger(log_level, log_format)

    async def inner():
        importer = Importer(
            config_path=config_path,
            database_url=database_url,
            event_id=event_id,
            output_dir=output_dir,
            raw_snapshot_file=raw_snapshot_file,
            dreps_file=dreps_file,
        )
        await importer.run()

    asyncio.run(inner())
