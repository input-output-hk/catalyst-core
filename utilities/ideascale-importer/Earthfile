# Set the Earthly version to 0.7
VERSION 0.7

# Use current debian stable with python
FROM python:3.11-slim-bullseye

# Environment variables for python
ENV PYTHONUNBUFFERED=true

build:
    WORKDIR /src/utilities/ideascale-importer

    # Install system dependencies
    RUN apt-get update && \
        apt-get install -y --no-install-recommends curl build-essential libxml2-dev libxslt-dev zlib1g-dev python3-lxml

    # Install Poetry
    RUN curl -sSL https://install.python-poetry.org | python3 -

    # Set path to poetry
    ENV PATH=/root/.local/bin:$PATH

    # Copy the pyproject.toml and poetry.lock files to the container
    COPY pyproject.toml .
    COPY poetry.lock .
    COPY --dir ideascale_importer README.md ./

    # Install package dependencies
    RUN poetry env use python
    RUN poetry config installer.max-workers 10
    RUN poetry install --no-cache --no-root

    # Build the distribution wheels and save them as artifacts
    RUN poetry export --without-hashes -f requirements.txt --output requirements.txt
    RUN poetry build --no-cache -f wheel
    RUN mkdir -p /wheels && mv dist/*.whl /wheels && rm -rf dist
    SAVE ARTIFACT /src/utilities/ideascale-importer src
    SAVE ARTIFACT /wheels wheels
    SAVE ARTIFACT requirements.txt

docker:
    ARG tag="latest"
    ARG registry

    # Install system dependencies
    RUN apt-get update && \
        apt-get install -y --no-install-recommends libpq5 build-essential libxml2-dev libxslt-dev zlib1g-dev python3-lxml

    ## apt cleanup
    RUN apt-get clean && \
        rm -rf /var/lib/apt/lists/*

    WORKDIR /app

    # Copy the distribution wheels from the build stage
    COPY +build/wheels /app
    COPY +build/requirements.txt /app
    COPY ../../src/catalyst-toolbox/catalyst-toolbox+build/catalyst-toolbox /app/catalyst-toolbox
    COPY ../../src/voting-tools-rs+build/snapshot_tool /app/snapshot_tool
    COPY entry.sh /app
    RUN chmod +x entry.sh

    # Install the package
    RUN pip3 install --no-cache -r requirements.txt
    RUN pip3 install --no-cache *.whl

    ENV PATH=/app:$PATH

    # Set the default command to run the main script
    ENTRYPOINT ["/app/entry.sh"]

    # Build and tag the Docker image
    SAVE IMAGE --push ${registry}ideascale-importer:$tag
