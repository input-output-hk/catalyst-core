// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

// For now this has to be manually added...
#[allow(clippy::wildcard_imports)]
use crate::schema::*;

use bigdecimal::BigDecimal;
use chrono::NaiveDateTime;
#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = challenge)]
pub struct Challenge {
    pub row_id: i32,
    pub id: i32,
    pub election: i32,
    pub category: String,
    pub title: String,
    pub description: String,
    pub rewards_currency: Option<String>,
    pub rewards_total: Option<i64>,
    pub proposers_rewards: Option<i64>,
    pub vote_options: Option<i32>,
    pub extra: Option<serde_json::Value>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(name))]
#[diesel(table_name = challenge_category)]
pub struct ChallengeCategory {
    pub name: String,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = community_advisors_review)]
pub struct CommunityAdvisorsReview {
    pub row_id: i32,
    pub proposal_id: i32,
    pub assessor: String,
    pub impact_alignment_rating_given: Option<i32>,
    pub impact_alignment_note: Option<String>,
    pub feasibility_rating_given: Option<i32>,
    pub feasibility_note: Option<String>,
    pub auditability_rating_given: Option<i32>,
    pub auditability_note: Option<String>,
    pub ranking: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = config)]
pub struct Config {
    pub row_id: i32,
    pub id: String,
    pub id2: String,
    pub id3: String,
    pub value: Option<serde_json::Value>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = contributions)]
pub struct Contribution {
    pub row_id: i32,
    pub stake_public_key: String,
    pub snapshot_id: i32,
    pub voting_key: String,
    pub voting_weight: i32,
    pub voting_key_idx: i32,
    pub value: i64,
    pub voting_group: String,
    pub reward_address: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(name))]
#[diesel(table_name = currency)]
pub struct Currency {
    pub name: String,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = election)]
pub struct Election {
    pub row_id: i32,
    pub name: String,
    pub description: String,
    pub registration_snapshot_time: Option<NaiveDateTime>,
    pub voting_power_threshold: Option<i64>,
    pub max_voting_power_pct: Option<BigDecimal>,
    pub start_time: Option<NaiveDateTime>,
    pub end_time: Option<NaiveDateTime>,
    pub insight_sharing_start: Option<NaiveDateTime>,
    pub proposal_submission_start: Option<NaiveDateTime>,
    pub refine_proposals_start: Option<NaiveDateTime>,
    pub finalize_proposals_start: Option<NaiveDateTime>,
    pub proposal_assessment_start: Option<NaiveDateTime>,
    pub assessment_qa_start: Option<NaiveDateTime>,
    pub snapshot_start: Option<NaiveDateTime>,
    pub voting_start: Option<NaiveDateTime>,
    pub voting_end: Option<NaiveDateTime>,
    pub tallying_end: Option<NaiveDateTime>,
    pub extra: Option<serde_json::Value>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = goal)]
pub struct Goal {
    pub id: i32,
    pub election_id: i32,
    pub idx: i32,
    pub name: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = proposal)]
pub struct Proposal {
    pub row_id: i32,
    pub id: i32,
    pub challenge: i32,
    pub title: String,
    pub summary: String,
    pub public_key: String,
    pub funds: i64,
    pub url: String,
    pub files_url: String,
    pub impact_score: i64,
    pub extra: Option<serde_json::Value>,
    pub proposer_name: String,
    pub proposer_contact: String,
    pub proposer_url: String,
    pub proposer_relevant_experience: String,
    pub bb_proposal_id: Option<Vec<u8>>,
    pub bb_vote_options: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = proposal_voteplan)]
pub struct ProposalVoteplan {
    pub row_id: i32,
    pub proposal_id: Option<i32>,
    pub voteplan_id: Option<i32>,
    pub bb_proposal_index: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = snapshots)]
pub struct Snapshot {
    pub row_id: i32,
    pub election: i32,
    pub as_at: NaiveDateTime,
    pub last_updated: NaiveDateTime,
    pub final_: bool,
    pub dbsync_snapshot_cmd: Option<String>,
    pub dbsync_snapshot_data: Option<String>,
    pub drep_data: Option<String>,
    pub catalyst_snapshot_cmd: Option<String>,
    pub catalyst_snapshot_data: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = vote_options)]
pub struct VoteOption {
    pub id: i32,
    pub idea_scale: Option<String>,
    pub challenge: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = voteplan)]
pub struct Voteplan {
    pub row_id: i32,
    pub election_id: i32,
    pub id: String,
    pub category: String,
    pub encryption_key: Option<String>,
    pub group_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(name))]
#[diesel(table_name = voteplan_category)]
pub struct VoteplanCategory {
    pub name: String,
    pub public_key: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = voters)]
pub struct Voter {
    pub row_id: i64,
    pub voting_key: String,
    pub snapshot_id: i32,
    pub voting_group: String,
    pub voting_power: i64,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(fragment_id))]
#[diesel(table_name = votes)]
pub struct Vote {
    pub fragment_id: String,
    pub caster: String,
    pub proposal: i32,
    pub voteplan_id: String,
    pub time: f32,
    pub choice: Option<i16>,
    pub raw_fragment: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
#[diesel(table_name = voting_group)]
pub struct VotingGroup {
    pub row_id: i32,
    pub group_id: String,
    pub election_id: i32,
    pub token_id: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(hostname))]
#[diesel(table_name = voting_nodes)]
pub struct VotingNode {
    pub hostname: String,
    pub pubkey: String,
    pub seckey: String,
    pub netkey: String,
}
