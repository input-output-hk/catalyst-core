/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VitSsVotePlan {
    /// API identifier of the vote plan.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<serde_json::Value>>,
    /// Blockchain ID of the vote plan transaction.
    #[serde(rename = "chain_voteplan_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chain_voteplan_id: Option<Option<serde_json::Value>>,
    /// Date and time for the start of voting on this vote plan.
    #[serde(rename = "chain_vote_start_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chain_vote_start_time: Option<Option<serde_json::Value>>,
    /// Date and time for the end of voting on this vote plan.
    #[serde(rename = "chain_vote_end_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chain_vote_end_time: Option<Option<serde_json::Value>>,
    /// Date and time for the end of tallying on this vote plan.
    #[serde(rename = "chain_committee_end_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chain_committee_end_time: Option<Option<serde_json::Value>>,
    /// Whether the voting is done using the public or the privacy-preserving protocol. 
    #[serde(rename = "chain_voteplan_payload", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chain_voteplan_payload: Option<Option<serde_json::Value>>,
    /// The fund ID this vote plan belongs to.
    #[serde(rename = "fund_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fund_id: Option<Option<serde_json::Value>>,
    /// The identifier of voting power token used withing this plan. 
    #[serde(rename = "voting_token", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub voting_token: Option<Option<serde_json::Value>>,
}

impl VitSsVotePlan {
    pub fn new() -> VitSsVotePlan {
        VitSsVotePlan {
            id: None,
            chain_voteplan_id: None,
            chain_vote_start_time: None,
            chain_vote_end_time: None,
            chain_committee_end_time: None,
            chain_voteplan_payload: None,
            fund_id: None,
            voting_token: None,
        }
    }
}


