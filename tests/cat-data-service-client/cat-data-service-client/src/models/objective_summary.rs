/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// ObjectiveSummary : Summary off an Individual Objective

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ObjectiveSummary {
    /// The Numeric ID of an Objective to be decided in a Voting Event
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The \"Type\" of Objective
    #[serde(rename = "type")]
    pub r#type: Box<crate::models::ObjectiveType>,
    /// The title for this Objective.
    #[serde(rename = "title", deserialize_with = "Option::deserialize")]
    pub title: Option<serde_json::Value>,
    /// Long form explanation of this particular objective.\\ *May contain HTML Markup.*\\ *May contain Links to external content or assets.*
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<serde_json::Value>,
}

impl ObjectiveSummary {
    /// Summary off an Individual Objective
    pub fn new(
        id: Option<serde_json::Value>,
        r#type: crate::models::ObjectiveType,
        title: Option<serde_json::Value>,
        description: Option<serde_json::Value>,
    ) -> ObjectiveSummary {
        ObjectiveSummary {
            id,
            r#type: Box::new(r#type),
            title,
            description,
        }
    }
}
