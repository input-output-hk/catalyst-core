/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// DelegationInfo : voters delegation info

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DelegationInfo {
    /// Hex encoded voting key for this delegation.
    #[serde(rename = "voting_key", deserialize_with = "Option::deserialize")]
    pub voting_key: Option<serde_json::Value>,
    #[serde(rename = "group")]
    pub group: crate::models::VoterGroupId,
    /// Relative weight assigned to this voting key.
    #[serde(rename = "weight", deserialize_with = "Option::deserialize")]
    pub weight: Option<serde_json::Value>,
    /// Raw voting power distributed to this voting key.
    #[serde(rename = "value", deserialize_with = "Option::deserialize")]
    pub value: Option<serde_json::Value>,
}

impl DelegationInfo {
    /// voters delegation info
    pub fn new(
        voting_key: Option<serde_json::Value>,
        group: crate::models::VoterGroupId,
        weight: Option<serde_json::Value>,
        value: Option<serde_json::Value>,
    ) -> DelegationInfo {
        DelegationInfo {
            voting_key,
            group,
            weight,
            value,
        }
    }
}
