/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// EventDetails : Detailed information for an individual voting event.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EventDetails {
    /// How Voting Power is Calculated and its parameters.
    #[serde(rename = "voting_power", skip_serializing_if = "Option::is_none")]
    pub voting_power: Option<Box<crate::models::VotingPowerSettings>>,
    /// Registration deadlines and when its finalized.  Plus any other parameters.
    #[serde(rename = "registration", skip_serializing_if = "Option::is_none")]
    pub registration: Option<Box<crate::models::EventRegistration>>,
    /// The ordered goals of the voting event.
    #[serde(
        rename = "goals",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub goals: Option<Option<serde_json::Value>>,
    /// The schedule of the voting Event
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<crate::models::EventSchedule>>,
}

impl EventDetails {
    /// Detailed information for an individual voting event.
    pub fn new() -> EventDetails {
        EventDetails {
            voting_power: None,
            registration: None,
            goals: None,
            schedule: None,
        }
    }
}
