/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// Rating : Individual Rating

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Rating {
    /// The review type being rated. Maps to the ReviewType id.
    #[serde(rename = "review_type", deserialize_with = "Option::deserialize")]
    pub review_type: Option<serde_json::Value>,
    /// Score given to this rating. Will be bounded by the `min` and `max` of the ReviewType.
    #[serde(rename = "score", deserialize_with = "Option::deserialize")]
    pub score: Option<serde_json::Value>,
    /// Reason why this rating was given. If NO reason was given, this field is omitted.
    #[serde(
        rename = "note",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub note: Option<Option<serde_json::Value>>,
}

impl Rating {
    /// Individual Rating
    pub fn new(review_type: Option<serde_json::Value>, score: Option<serde_json::Value>) -> Rating {
        Rating {
            review_type,
            score,
            note: None,
        }
    }
}
