/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VoteInfo {
    /// Blockchain ID of the vote plan transaction
    #[serde(
        rename = "fragment_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub fragment_id: Option<Option<serde_json::Value>>,
    /// public key of caster wallet
    #[serde(
        rename = "caster",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub caster: Option<Option<serde_json::Value>>,
    /// proposal index within voteplan
    #[serde(
        rename = "proposal",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub proposal: Option<Option<serde_json::Value>>,
    /// Blockchain ID of the vote plan transaction
    #[serde(
        rename = "voteplan_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub voteplan_id: Option<Option<serde_json::Value>>,
    /// block date in format epoch.slot_no
    #[serde(
        rename = "time",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<Option<serde_json::Value>>,
    /// vote choice (only visible for public voting)
    #[serde(
        rename = "choice",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub choice: Option<Option<serde_json::Value>>,
    /// raw bytes of transaction
    #[serde(
        rename = "raw_fragment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub raw_fragment: Option<Option<serde_json::Value>>,
}

impl VoteInfo {
    pub fn new() -> VoteInfo {
        VoteInfo {
            fragment_id: None,
            caster: None,
            proposal: None,
            voteplan_id: None,
            time: None,
            choice: None,
            raw_fragment: None,
        }
    }
}
