/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VitSsChallenge {
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "challenge_type",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub challenge_type: Option<Option<ChallengeType>>,
    #[serde(
        rename = "title",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub title: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "description",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "rewards_total",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub rewards_total: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "fund_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub fund_id: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "challenge_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub challenge_url: Option<Option<serde_json::Value>>,
    #[serde(rename = "highlights", skip_serializing_if = "Option::is_none")]
    pub highlights: Option<Box<crate::models::VitSsChallengeHighlights>>,
}

impl VitSsChallenge {
    pub fn new() -> VitSsChallenge {
        VitSsChallenge {
            id: None,
            challenge_type: None,
            title: None,
            description: None,
            rewards_total: None,
            fund_id: None,
            challenge_url: None,
            highlights: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChallengeType {
    #[serde(rename = "simple")]
    Simple,
    #[serde(rename = "community-choice")]
    CommunityChoice,
}

impl Default for ChallengeType {
    fn default() -> ChallengeType {
        Self::Simple
    }
}
