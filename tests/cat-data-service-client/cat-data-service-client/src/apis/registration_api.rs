/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`get_delegator_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDelegatorInfoError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_voter_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVoterInfoError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}


/// Get voters delegation info by stake public key.\\ If the `eid` query parameter is missing, then the \"Latest\" registration for the Stake Public Key is returned. 
pub async fn get_delegator_info(configuration: &configuration::Configuration, sp_key: serde_json::Value, event_id: Option<serde_json::Value>) -> Result<crate::models::DelegatorInfo, Error<GetDelegatorInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let event_id_unwrap = event_id.as_ref().unwrap();

    let local_var_uri_str = format!("{}/api/v1/registration/delegations/{sp_key}?event_id={event_id_unwrap}", local_var_configuration.base_path, sp_key=sp_key);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = event_id {
        local_var_req_builder = local_var_req_builder.query(&[("event_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDelegatorInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get voter's registration and voting power by their voting key.\\ If the `event_id` query parameter is omitted, then the latest voting power is retrieved. If the `with_delegators` query parameter is ommitted, then `delegator_addresses` field of `VoterInfo` type does not provided. 
pub async fn get_voter_info(configuration: &configuration::Configuration, vkey: serde_json::Value, event_id: Option<serde_json::Value>, with_delegators: Option<serde_json::Value>) -> Result<crate::models::VotersInfo, Error<GetVoterInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let event_id_unwrap = event_id.as_ref().unwrap();
    let with_delegators_unwrap = with_delegators.as_ref().unwrap();

    let local_var_uri_str = format!("{}/api/v1/registration/voter/{vkey}?event_id={event_id_unwrap}&with_delegators={with_delegators_unwrap}", local_var_configuration.base_path, vkey=vkey);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = event_id {
        local_var_req_builder = local_var_req_builder.query(&[("event_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_delegators {
        local_var_req_builder = local_var_req_builder.query(&[("with_delegators", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVoterInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

