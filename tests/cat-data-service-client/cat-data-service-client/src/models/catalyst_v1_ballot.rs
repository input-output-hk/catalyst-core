/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// CatalystV1Ballot : Details necessary to complete a ballot for the specific proposal and objective.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CatalystV1Ballot {
    /// Ordered list of choices available for all proposals in this Objective. The offset into the array is the index of the choice. For example, the first element is Choice 0, second is Choice 1 and so on.
    #[serde(rename = "choices", deserialize_with = "Option::deserialize")]
    pub choices: Option<serde_json::Value>,
    /// List of groups and the voteplans they use when voting on this proposal. Each valid group for this Objective:   * Must be listed.   * Must not be repeated.
    #[serde(rename = "voteplans", deserialize_with = "Option::deserialize")]
    pub voteplans: Option<serde_json::Value>,
}

impl CatalystV1Ballot {
    /// Details necessary to complete a ballot for the specific proposal and objective.
    pub fn new(choices: Option<serde_json::Value>, voteplans: Option<serde_json::Value>) -> CatalystV1Ballot {
        CatalystV1Ballot {
            choices,
            voteplans,
        }
    }
}


