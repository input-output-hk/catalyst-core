/*
 * Catalyst 1.0
 *
 * Revised API expressing all capabilities of the Catalyst 1.0 Backend.  TODO: * Implement Permissionless Auth. * Implement Replacement Functionality for GVC. * Implement drep registration on main-chain, distinct from voter registration. * Implement Voting API abstracting the Jormungandr API from public exposure. * Implement Audit API's (Retrieve voting blockchain records,  registration/voting power audit and private tally audit. * Implement API's needed to support posting Ideas/Proposals etc.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: steven.johnson@iohk.io
 * Generated by: https://openapi-generator.tech
 */

/// EventRegistration : Details about Voting Event Registration



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EventRegistration {
    /// The Registration Purpose.
    #[serde(rename = "purpose", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Option<serde_json::Value>>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "deadline", deserialize_with = "Option::deserialize")]
    pub deadline: Option<serde_json::Value>,
    /// RFC3339 DateTime String UTC.
    #[serde(rename = "taken", deserialize_with = "Option::deserialize")]
    pub taken: Option<serde_json::Value>,
}

impl EventRegistration {
    /// Details about Voting Event Registration
    pub fn new(deadline: Option<serde_json::Value>, taken: Option<serde_json::Value>) -> EventRegistration {
        EventRegistration {
            purpose: None,
            deadline,
            taken,
        }
    }
}


