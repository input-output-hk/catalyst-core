# Our docs are in mdbook format, so install that tool
# See
[tasks.install-mdbook]
install_crate = { crate_name = "mdbook", binary = "mdbook", test_arg = "--help" }


# We can use any diagram supported by kroki
# See: https://lib.rs/crates/mdbook-kroki-preprocessor
#    : https://kroki.io/
[tasks.install-mdbook-kroki]
install_crate = { crate_name = "mdbook-kroki-preprocessor", binary = "mdbook-kroki-preprocessor", test_arg = "--help" }

# We check all links
# See: https://github.com/Michael-F-Bryan/mdbook-linkcheck
[tasks.install-mdbook-linkcheck]
install_crate = { crate_name = "mdbook-linkcheck", binary = "mdbook-linkcheck", test_arg = "--help" }

# We can use Admonish markup, so install that tool
# See: https://lib.rs/crates/mdbook-admonish
[tasks.install-mdbook-admonish]
install_crate = { crate_name = "mdbook-admonish", binary = "mdbook-admonish", test_arg = "--help" }
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
mdbook-admonish install --css-dir book/assets/css/
'''

# We can make our own regex preprocessing templates
# See: https://lib.rs/crates/mdbook-regex
[tasks.install-mdbook-regex]
install_crate = { crate_name = "mdbook-regex", binary = "mdbook-regex", test_arg = "--help" }

# Automatically adds an "Edit this file on GitHub" to each page
# See: https://lib.rs/crates/mdbook-open-on-gh
[tasks.install-mdbook-open-on-gh]
install_crate = { crate_name = "mdbook-open-on-gh", binary = "mdbook-open-on-gh", test_arg = "--help" }

# Automatically creates the summary page (man what a chore)
# See: https://lib.rs/crates/mdbook-fs-summary
[tasks.install-mdbook-fs-summary]
install_crate = { crate_name = "mdbook-fs-summary", binary = "mdbook-fs-summary", test_arg = "--help" }

# Automatically checks spelling in rust files.
# See: https://github.com/drahnr/cargo-spellcheck
[tasks.install-cargo-spellcheck]
install_crate = { crate_name = "cargo-spellcheck", binary = "cargo-spellcheck", test_arg = "--help" }

# Make a Page TOC on the RHS
# See: https://crates.io/crates/mdbook-theme
[tasks.install-mdbook-theme]
install_crate = { crate_name = "mdbook-theme", binary = "mdbook-theme", test_arg = "--help" }

# Allow the use of templates
# See: https://crates.io/crates/mdbook-template
[tasks.install-mdbook-template]
install_crate = { crate_name = "mdbook-template", binary = "mdbook-template", test_arg = "--help" }

[tasks.install-dbviz]
description = "Installs the latest dbviz for making db documentation from schema."
install_crate = { crate_name = "dbviz", test_arg = "--help" }
install_crate_args = [
  "--git",
  "https://github.com/stevenj/dbviz.git",
]
args = ["dbviz", "--help"]


[tasks.install-docs-prereqs]
workspace = false
run_task = { name = [
        "install-mdbook-kroki",
        "install-mdbook-regex",
        "install-mdbook-admonish",
        "install-mdbook-open-on-gh",
        "install-mdbook-linkcheck",
        "install-mdbook-fs-summary",
        "install-mdbook-theme",
        "install-mdbook-template",
        "install-cargo-spellcheck",
        "install-dbviz"
    ], parallel = true }
dependencies = [
    "install-mdbook"
]

# Force linkcheck to error not warn
[tasks.force-linkcheck-error]
workspace = false
category = "docs"
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
cp book.toml book.original.toml
cat book.original.toml
# modify the book.toml here.
'''

# Recover book.toml back to its original state.
[tasks.cleanup-linkcheck-error]
workspace = false
category = "docs"
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
cp book.original.toml book.toml
rm book.original.toml
'''

# Test the RUST src documentation code examples
[tasks.rustdoc-test]
workspace = false
category = "docs"
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
echo "cargo test --doc" does not apss, skipping.
#cargo test --doc
'''

# Generate Dependency Graphs for the documentation
[tasks.rustdoc-depgraph]
workspace = false
category = "docs"
script_runner = "@shell"
dependencies = [
    "rustdoc"
] # We test the rust doc tests first.
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
cargo depgraph --workspace-only --dedup-transitive-deps > target/doc/workspace.depgraph.dot
cargo depgraph --dedup-transitive-deps > target/doc/full.depgraph.dot
cargo depgraph --all-deps --dedup-transitive-deps > target/doc/all.depgraph.dot
'''

# Build the RUST src documentation
[tasks.rustdoc]
workspace = false
category = "docs"
script_runner = "@shell"
dependencies = [
    "rustdoc-test"
] # We test the rust doc tests first.
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
# Remove when no longer needed
rustup component add rustfmt --toolchain nightly-x86_64-unknown-linux-gnu
# Remove above when no longer needed. Hack to get docs to build.
RUSTDOCFLAGS="$RUSTDOCFLAGS --enable-index-page -Zunstable-options" cargo +nightly doc \
  --workspace \
  --no-deps \
  --document-private-items
'''

# Build the RUST src documentation
# We need to remove the debug and .rust* files otherwise they
# end up inside the book, and are not needed.
[tasks.build-rust-docs]
workspace = false
category = "docs"
dependencies = [
    "rustdoc",
    "rustdoc-depgraph"
] # We build the rust docs first.
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
mkdir -p book/src/06_rust_api/rust
cp -a target/doc book/src/06_rust_api/rust
# This lock file prevents the docs being deployed by github actions.
rm -f book/src/06_rust_api/rust/doc/.lock
# Prevents the book index from building.
rm -f book/src/06_rust_api/rust/doc/static.files/*.md
'''

# We need to remove the debug and .rust* files otherwise they
# end up inside the book, and are not needed.
#[tasks.build-rust-docs]
#workspace = false
#category = "docs"
#script_runner = "@shell"
#script = '''
#cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
#cargo doc --workspace --target-dir book/tmp/rust --no-deps
#./utilities/mdbook-rust-doc/mdbook-rust-doc.py --page book/src/06_rust_api/rust_api.md --rustdoc book/tmp/rust/doc --md-relative-path rust
#'''

# Build the Event DB Documentation (Images of Schema)
[tasks.build-db-docs-overview-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database Overview" \
    -e  funds proposals \
        proposals_voteplans \
        proposal_simple_challenge \
        proposal_community_choice_challenge \
        voteplans \
        api_tokens \
        challenges \
        community_advisors_reviews \
        goals \
        groups \
        full_proposals_info \
        refinery_schema_history \
        > ./book/src/08_event-db/db-diagrams/event-db-overview.dot
'''

[tasks.build-db-docs-moderation-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database Moderation Stage" \
    --comments \
    --column-description-wrap 40 \
    -i  moderation_allocation \
        moderation \
        > ./book/src/08_event-db/db-diagrams/event-db-moderation.dot
'''

[tasks.build-db-docs-config-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database - Configuration" \
    --comments \
    --column-description-wrap 60 \
    -i  refinery_schema_history \
        config \
        > ./book/src/08_event-db/db-diagrams/event-db-config.dot
'''

[tasks.build-db-docs-event-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database - Event" \
    --comments \
    --column-description-wrap 140 \
    -i  event \
        goal \
    > ./book/src/08_event-db/db-diagrams/event-db-event.dot
'''

[tasks.build-db-docs-objective-proposal-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database - Objectives & Proposals" \
    --comments \
    --column-description-wrap 40 \
    -i  challenge_category \
        objective_category \
        currency \
        vote_options \
        objective \
        proposal \
        proposal_review \
        objective_review_metric \
        review_rating \
        review_metric \
        > ./book/src/08_event-db/db-diagrams/event-db-objective-proposal.dot
'''

[tasks.build-db-docs-vote-plan-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database - Vote Plans" \
    --comments \
    --column-description-wrap 40 \
    -i  voteplan_category \
        voting_group \
        voteplan \
        proposal_voteplan \
        > ./book/src/08_event-db/db-diagrams/event-db-vote-plan.dot
'''

[tasks.build-db-docs-snapshot-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database - Snapshot" \
    --comments \
    --column-description-wrap 40 \
    -i  snapshot \
        voter \
        contribution \
        ballot \
        voteplan \
        > ./book/src/08_event-db/db-diagrams/event-db-snapshot-vote.dot
'''

[tasks.build-db-docs-automation-diagram]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup"
]
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
dbviz -d CatalystEventDocs \
    -h postgres \
    --title "Catalyst Event Database - Automation" \
    --comments \
    --column-description-wrap 40 \
    -i  voting_node \
        tally_committee \
        > ./book/src/08_event-db/db-diagrams/event-db-automation.dot
'''

[tasks.build-db-docs]
workspace = false
category = "docs"
dependencies = [
    "doc-event-db-setup",
    "build-db-docs-overview-diagram",
    "build-db-docs-config-diagram",
    "build-db-docs-event-diagram",
    "build-db-docs-objective-proposal-diagram",
    "build-db-docs-vote-plan-diagram",
    "build-db-docs-snapshot-diagram",
    "build-db-docs-automation-diagram",
    "build-db-docs-moderation-diagram",
]


# Build and serve a live view of the POC Documentation
[tasks.view-docs]
workspace = false
category = "docs"
dependencies = [
    "build-db-docs",
    "build-rust-docs"
] # We build the rust docs first.
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
mdbook serve --open
'''

# Build the Documentation only
[tasks.build-mdbook]
workspace = false
category = "docs"
dependencies = [
    "build-db-docs",
    "build-rust-docs"
] # We build the rust docs first.
script_runner = "@shell"
script = '''
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
mdbook build
'''

[tasks.build-docs]
workspace = false
category = "docs"
dependencies = [
    "build-mdbook"
]

[tasks.build-docs-linkcheck]
workspace = false
category = "docs"
dependencies = [
    "force-linkcheck-error",
    "build-mdbook",
    "cleanup-linkcheck-error"
]

[tasks.docs-lint]
workspace = false
script_runner = "@shell"
script = '''
echo Suggest running markdown lint manually because it varies between platforms.
echo Recommended CLI: https://github.com/DavidAnson/markdownlint-cli2
'''
