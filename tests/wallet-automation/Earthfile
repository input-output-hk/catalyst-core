VERSION 0.7

deps:
    FROM mcr.microsoft.com/playwright:v1.40.1-jammy
    WORKDIR /app

    RUN apt-get update && apt-get -y install libnss3 libatk-bridge2.0-0 libdrm-dev libxkbcommon-dev libgbm-dev libasound-dev libatspi2.0-0 libxshmfence-dev
    RUN apt-get install -y postgresql-client

    #Java is needed for allure
    # RUN apt-get update && \
    #     apt-get install -y openjdk-8-jdk && \
    #     apt-get install -y ant && \
    #     apt-get clean && \
    #     rm -rf /var/lib/apt/lists/ && \
    #     rm -rf /var/cache/oracle-jdk8-installer;
    # ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/

    COPY package.json .
    COPY package-lock.json .

    RUN npm install
    ENV PATH /app/node_modules/.bin:$PATH

src:
    FROM +deps

    COPY --dir src test-data playwright.config.ts .

docker:
    FROM +src
    ARG tag="latest"

    # ENV EVENT_DB_URL postgres://postgres:postgres@postgres/CatalystEventDev
    # ENV MODERATION_FRONTEND_URL http://frontend:80/
    # ENV VITE_API_URL http://backend:8000/api

    SAVE IMAGE voices-tests:$tag

# test-local-setup:
#     BUILD ../backend+publish
#     BUILD github.com/input-output-hk/catalyst-core/containers/event-db-migrations+publish --data='' --tag='latest'
#     BUILD ../moderation-tool-frontend+publish
#     BUILD +docker

# docker-compose:
#     FROM scratch

#     COPY docker-compose.yml .
#     SAVE ARTIFACT docker-compose.yml

# e2e-test:
#     FROM earthly/dind:alpine

#     COPY +docker-compose/docker-compose.yml .
#     WITH DOCKER --compose docker-compose.yml \
#                 --pull postgres:14 \
#                 --load migrations:latest=(github.com/input-output-hk/catalyst-core/containers/event-db-migrations+publish --data='' --tag='latest') \
#                 --load voices-backend:latest=(../backend+publish) \
#                 --load moderation-tool-frontend:latest=(../moderation-tool-frontend+publish) \
#                 --load test:latest=(+docker) \
#                 --service postgres \
#                 --service migrations \
#                 --service backend \
#                 --service frontend
#         RUN docker run --network=default_default test:latest npm test
#     END